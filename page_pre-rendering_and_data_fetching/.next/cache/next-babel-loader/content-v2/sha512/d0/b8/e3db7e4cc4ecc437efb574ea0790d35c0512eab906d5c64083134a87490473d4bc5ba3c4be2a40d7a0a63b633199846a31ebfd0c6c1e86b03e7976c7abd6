{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\n\nconst getData = async () => {\n  const filePath = path.join(process.cwd(), \"data\", \"dummy-backend.json\");\n  const jsonData = await fs.readFile(filePath);\n  const data = JSON.parse(jsonData);\n  return data;\n};\n\nexport async function getStaticProps(context) {\n  const {\n    params\n  } = context;\n  const productId = params.pid;\n  const data = await getData();\n  const product = data.products.find(product => product.id === productId);\n\n  if (!product) {\n    return {\n      notFound: true\n    };\n  }\n\n  return {\n    props: {\n      loadedProduct: product\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const data = await getData();\n  const ids = data.products.map(product => product.id);\n  const params = ids.map(id => ({\n    params: {\n      pid: id\n    }\n  }));\n  return {\n    // paths: [{ params: { pid: \"p1\" } }],\n    paths: params,\n    fallback: true\n  };\n}\n\nconst productDetailpage = props => {\n  const {\n    loadedProduct\n  } = props;\n\n  if (!loadedProduct) {\n    return /*#__PURE__*/_jsx(\"p\", {\n      children: \"Loading...\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      children: loadedProduct.title\n    }), /*#__PURE__*/_jsx(\"p\", {\n      children: loadedProduct.description\n    })]\n  });\n};\n\n1;\nexport default productDetailpage;","map":null,"metadata":{},"sourceType":"module"}